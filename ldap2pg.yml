#
# **LDAP2PG CONFIGURATION**
#
# This is a sample starting point configuration file for ldap2pg.yml.
#
# ldap2pg file is a regular YAML file. File mode must be 0600 if you store a
# password in it.
#
# See also full documentation on how to configure ldap2pg at
# https://ldap2pg.readthedocs.io/en/latest/config/.


# The sync map is a list of mappings. Each mapping describes an optional LDAP
# query and a set of rules to generate roles or ACL grant from entries returned
# by LDAP.


# First, a static rule to create an extra roles not in LDAP. Here we create a
# ldap_users role in which all roles defined here will belong to. See below.
# Note that role names are lowercase in Postgres. ldap2pg takes care of
# lowering inputs.
- role:
    name: LDAP_USERS
    options: NOLOGIN
# Second mapping, query LDAP and generate DBA roles.
- ldap:
    base: cn=dba,ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    scope: sub
    filter: "(objectClass=groupOfNames)"
    attribute: member
  # A single rule to generate roles for each entries.
  role:

    # *_attribute allows to fetch the value from an LDAP entry attribute. A role
    # is generated for each value returned by LDAP directory.
    #
    # If the attribute is a LDAP distinguishedName, you can specify which part
    # of the DN to use instead of the whole attribute value.
    #
    # e.g. `member: cn=alice,dc=company,dc=com` generates `CREATE ROLE alice;`
    #
    name_attribute: member.cn
    # Postgres role options: Can be a regular SQL snippet, a list or a dict.
    options: LOGIN SUPERUSER NOBYPASSRLS
    # Define static parents
    parent: LDAP_USERS

# Here we will create a group for each LDAP group and create their members.
- ldap:
    base: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    filter: "(objectClass=groupOfNames)"
    # We'll need cn of the group and all member.
    attributes: [cn, member]
  roles:
  # Creates a *group* role with cn for role name, and member.cn as member list.
  - name_attribute: cn
    members_attribute: member.cn
    options: [NOLOGIN]
  # Creates a role for each member.cn
  - name_attribute: member.cn
    options:
      LOGIN: yes
    parents: [LDAP_USERS]
