# File dedicated to test real ACL use cases. This allow to test documentation
# exemple.

postgres:
  roles_query: null


acls:
  # CONNECT ACL on database
  connect:
    inspect: |
      WITH d AS (
          SELECT
              (aclexplode(datacl)).grantee AS grantee,
              (aclexplode(datacl)).privilege_type AS priv
          FROM pg_catalog.pg_database
          WHERE datname = current_database()
      )
      SELECT NULL as namespace, r.rolname, TRUE as "full"
      FROM pg_catalog.pg_roles AS r
      JOIN d ON d.grantee = r.oid AND d.priv = 'CONNECT'
    grant: |
      GRANT CONNECT ON DATABASE {database} TO {role};
    revoke: |
      REVOKE CONNECT ON DATABASE {database} FROM {role};

  # CONNECT ACL on PUBLIC role database
  public:
    inspect: |
      -- Returns public if no ACLs are defined in this database.
      WITH
      acls AS (
          SELECT
              (aclexplode(datacl)).grantee AS grantee,
              (aclexplode(datacl)).privilege_type AS priv
          FROM pg_catalog.pg_database
          WHERE datname = current_database()
      ),
      static AS (
          SELECT NULL AS namespace, 'public' AS rolname
      )
      SELECT static.*, TRUE as "full" FROM static
      LEFT OUTER JOIN acls ON acls.grantee = 0
      WHERE acls.grantee IS NULL;
    revoke: |
      REVOKE CONNECT ON DATABASE {database} FROM {role}

  schema-usage:
    inspect: |
      WITH namespace_acl AS (
        SELECT
          nsp.nspname,
          (aclexplode(nspacl)).grantee,
          (aclexplode(nspacl)).privilege_type
        FROM pg_catalog.pg_namespace nsp
      )
      SELECT
        nspname, rolname
      FROM namespace_acl
      JOIN pg_catalog.pg_roles rol ON rol.oid = grantee
      WHERE privilege_type = 'USAGE'
    grant: GRANT USAGE ON SCHEMA {schema} TO {role}
    revoke: REVOKE USAGE ON SCHEMA {schema} FROM {role}

  default-tables-select:
    inspect: |
      WITH acls AS (
        SELECT
          defaclnamespace AS oid,
          (aclexplode(defaclacl)).grantee,
          (aclexplode(defaclacl)).privilege_type
        FROM pg_catalog.pg_default_acl
        WHERE defaclobjtype = 'r'
      )
      SELECT
        nspname, rolname
      FROM acls
      JOIN pg_catalog.pg_namespace nsp ON nsp.oid = acls.oid
      JOIN pg_catalog.pg_roles rol ON rol.oid = grantee
    grant: |
      ALTER DEFAULT PRIVILEGES IN SCHEMA {schema} GRANT SELECT ON TABLES TO {role};
    revoke: |
      ALTER DEFAULT PRIVILEGES IN SCHEMA {schema} REVOKE SELECT ON TABLES FROM {role};

  all-tables-select:
    inspect: |
      WITH
      namespace_tables AS (
        -- All namespace and role having grant on it, and array of available
        -- relations in the namespace.
        SELECT
          nsp.nspname,
          ARRAY(
            SELECT UNNEST(array_agg(rel.relname)
            FILTER (WHERE rel.relname IS NOT NULL))
            ORDER BY 1
          ) AS tables
        FROM pg_catalog.pg_namespace nsp
        LEFT OUTER JOIN pg_catalog.pg_class rel
          ON rel.relnamespace = nsp.oid AND relkind IN ('r', 'v')
        WHERE nspname NOT LIKE 'pg_%'
        GROUP BY 1
      ),
      tables_grants AS (
        SELECT
          table_schema AS "schema",
          grantee,
          -- Aggregate the relation grant for this privilege.
          ARRAY(SELECT UNNEST(array_agg(table_name::name)) ORDER BY 1) AS tables
        FROM information_schema.role_table_grants
        WHERE privilege_type = 'SELECT'
        GROUP BY 1, 2
      )
      SELECT
        nspname, rolname,
        rels.tables = nsp.tables AS "full"
      FROM namespace_tables nsp
      CROSS JOIN pg_catalog.pg_roles rol
      JOIN tables_grants rels
        ON rels."schema" = nsp.nspname AND rels.grantee = rolname
    grant: |
      GRANT SELECT ON ALL TABLES IN SCHEMA {schema} TO {role};
    revoke: |
      REVOKE SELECT ON ALL TABLES IN SCHEMA {schema} FROM {role};

  ro:
  - schema-usage
  - default-tables-select
  - all-tables-select

sync_map:
- grant:
    role: daniel
    acl: connect
    database: frontend
    schema: __any__
- grant:
    role: daniel
    acl: ro
    database: frontend
    schema: __all__
