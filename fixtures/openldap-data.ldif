#
# Dév fixture tries to mimic ACME DB access policy.
#
# ACME has two apps: old and app. Each app has a dedicated team. ACME also have
# a big DBA team. That have access to everything.
#
# Users are in UO people. Groups in groups. Each team is defined in a groups,
# referencing peoples entries.
#

version: 2
charset: UTF-8

# Create the testsasl user to test SASL
dn: cn=testsasl,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectClass: inetOrgPerson
cn: testsasl
uid: testsasl
sn: SASL is not Simple
# Clear password for SASL auth
userPassword: voyage

dn: ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalUnit
objectclass: top
ou: people

# Our database Administrators: a*
dn: cn=ALICE,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: ALICE

dn: cn=Alan,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: Alan

dn: cn=albert,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: albert

# Alter has no luck, his name is a SQL literal ^^
dn: cn=alter,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: alter

# Our developers: d*
dn: cn=daniel,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: daniel

dn: cn=david,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: david

dn: cn=denis,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: denis

dn: cn=didier,ou=people,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalRole
objectclass: top
cn: didier

# For unicode test
dn:: Y249ZG9yb3Row6llLG91PXBlb3BsZSxkYz1sZGFwLGRjPWxkYXAycGcsZGM9ZG9ja2Vy
changetype: add
objectClass: organizationalRole
objectClass: uidObject
objectClass: top
cn:: ZG9yb3Row6ll
uid: dorothee

# Our outsiders: o*

# dn: cn=œdipe,ou=people,dc=ldap,dc=ldap2pg,dc=docker
# changetype: add
# objectclass: organizationalRole
# objectclass: top
# cn: œdipe

# dn: cn=olivier,ou=people,dc=ldap,dc=ldap2pg,dc=docker
# changetype: add
# objectclass: organizationalRole
# objectclass: top
# cn: olivier

# dn: cn=omar,ou=people,dc=ldap,dc=ldap2pg,dc=docker
# changetype: add
# objectclass: organizationalRole
# objectclass: top
# cn: omar

# dn: cn=oscar,ou=people,dc=ldap,dc=ldap2pg,dc=docker
# changetype: add
# objectclass: organizationalRole
# objectclass: top
# cn: oscar

dn: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectclass: organizationalUnit
objectclass: top
ou: groups

dn: cn=dba,ou=groups,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectClass: groupOfNames
objectClass: top
cn: dba
member: cn=Alan,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=albert,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=ALICE,ou=people,dc=ldap,dc=ldap2pg,dc=docker

# Our apps, with their developers.

# An old app
# dn: cn=old,ou=groups,dc=ldap,dc=ldap2pg,dc=docker
# changetype: add
# objectClass: groupOfNames
# objectClass: top
# cn: old

dn: cn=app,ou=groups,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectClass: groupOfNames
objectClass: top
cn: app
member: cn=carole,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=daniel,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=david,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=didier,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member:: Y249ZG9yb3Row6llLG91PXBlb3BsZSxkYz1sZGFwLGRjPWxkYXAycGcsZGM9ZG9ja2Vy

dn: cn=app2,ou=groups,dc=ldap,dc=ldap2pg,dc=docker
changetype: add
objectClass: groupOfNames
objectClass: top
cn: app
member: cn=carole,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=daniel,ou=people,dc=ldap,dc=ldap2pg,dc=docker
member: cn=denis,ou=people,dc=ldap,dc=ldap2pg,dc=docker
