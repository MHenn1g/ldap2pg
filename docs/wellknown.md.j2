<!--*- markdown -*-->

<h1>Well-known ACL</h1>

`ldap2pg` provides some well-known ACLs for recurrent usage. There is **no
warranty** of any kind on these ACLs. You have to check privileges configuration
on your databases just like you should do with your own code.

The true added-value of well-known ACLs is the `inspect` queries associated.


## Using Well-known ACLs

Well-known ACL starts and lasts with `__`. `ldap2pg` disables ACL starting with
`_` or `.`, unless used in a group not starting with `_` or `.`. Thus you have
to include well-known ACLs in a group to enable them. If two groups refer the
same ACL, it will be deduplicated, don't worry.

Once an ACL is used, `ldap2pg` starts inspecting cluster for `GRANT` and
automatically *revokes* undefined grants.

``` yaml
acls:
  ro:
  - __connect__
  - __usage_on_schemas__
  - __select_on_tables__

  rw:
  - ro
  - __insert__
  - __update_on_tables__

  ddl:
  - rw
  - __all_on_schema__
  - __all_on_tables__

sync_map:
- grant:
    acl: ddl
    database: mydb
    schema: __all__
    role: admins
```

Well-known ACL name follows the following loose convention:

- `_on_all_tables__` is equivalent to `GRANT ... ON ALL TABLES IN SCHEMA ...`.
- `__default_...` is equivalent to `ALTER DEFAULT PRIVILEGES ... IN SCHEMA ...`.
- `__..._on_tables__` groups `__..._on_all_tables__` and
  `__default_..._on_tables__`.
- Group starting with `__all_on_` is *equivalent* to `ALL PRIVILEGES` in SQL.
- A privilege specific to one type does not have `_on_type__` e.g.
  `__delete_on_tables__` is shorten to `__delete__` .


## ACL groups

Next is an extensive, boring, list of all well known ACLs and ACL groups in
`master`. Each group is documented by its name and the list of included ACL.
Each ACL name point the the detail of ACL definition.

Actually, a group like `__all_on_tables__` is implemented as group of groups.
But for the sake of simplicity, the documentation lists the resolved list of
concrete ACLs finally included.

Here we go.
{% for name in groups|sort %}


<a name="{{ name|slugify }}"></a>
### Group `{{ name }}`

{% for child in aliases[name]|sort %}
- [`{{ child }}`](#{{ child|slugify }})
{% endfor %}
{% endfor %}


## ACLs

Next is the list of well-known ACL. Each is associated with a `REVOKE` query and
an `inspect` query implementing full inspection of grantees, including built-in
grants to PUBLIC.

For the actual meaning of each SQL privileges, refer to official [Postgres
documentation of
`GRANT`](https://www.postgresql.org/docs/current/static/sql-grant.html)
statement.

{% for name in acls|sort %}


<a name="{{ name|slugify }}"></a>
### ACL `{{ name }}`

``` SQL
{{ acls[name].grant|trim }}
```
{% endfor %}
